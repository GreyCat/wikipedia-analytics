#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'cgi'
require 'json'

require 'optparse'
require 'web_analytics_discovery'
require 'media_wiki'
require 'logger'

begin
	require_relative 'config'
rescue LoadError
	$stderr.puts <<__EOF__
You must create config file 'config.rb' with bot credentials to use this utility. Fill this template:

BOT_LOGIN = ''
BOT_PASSWORD = ''
__EOF__
	exit 1
end

include WebAnalyticsDiscovery

class Processor
	COMMENT = '<!-- обновляется ежемесячно ботом -->'

	def initialize(grabber, tmpl)
		@grabber = grabber
		@tmpl = tmpl
	end

	def process(src)
		src.gsub(/\{\{\s*#{@tmpl}\s*\|\s*([^{}|]+?)\s*\}\}/m) { |x|
			id = $1
			stat = @grabber.run_id(id)

			# Check that we've got data we need
			unless stat[:visitors_mon]
				warn "#{@grabber.class.to_s} returned no data"
				return src
			end

			"{{#{@tmpl}|#{id}|#{humanize(stat[:visitors_mon])} посетителей/месяц #{COMMENT}}}"
		}
	end

	def humanize(number)
		if number < 1_000
			number.to_s
		elsif number < 1_000_000
			sprintf '%.1f тыс.', number.to_f / 1_000
		elsif number < 1_000_000_000
			sprintf '%.1f млн', number.to_f / 1_000_000
		else
			sprintf '%.1f млрд', number.to_f / 1_000_000_000
		end
	end
end

class Rewriter
	def initialize(options)
		@options = options
		@wc = MediaWiki::Gateway.new('http://ru.wikipedia.org/w/api.php')
		@wc.login(BOT_LOGIN, BOT_PASSWORD)

		@log = Logger.new($stdout)
		@log.level = @options[:verbose] ? Logger::INFO : Logger::WARN
	end

	def run(grabber, tmpl, list)
		processor = Processor.new(grabber, tmpl)
		File.open(list).each_line { |title|
			title.chomp!
			t = title.gsub(/ /, '_')
			@log.info "#{t} - processing"
			src = @wc.get(t)
			@log.info "#{t} - downloaded Wikipedia article"
			dest = processor.process(src)

			if src != dest
				confirmed = @options[:auto] ? true : manual_confirmation(src, dest)
				if confirmed
					@wc.edit(t, dest, :summary => "Актуализирована #{tmpl}", :minor => 1)
				else
					@log.warn "#{t} - modification not confirmed"
				end
			else
				@log.warn "#{t} - not modified by #{processor.class.to_s}"
			end
		}
	end

	def manual_confirmation(src, dest)
		File.open('page-before', 'w') { |f| f.write(src) }
		File.open('page-after', 'w') { |f| f.write(dest) }
		system("diff -u page-before page-after")
		print 'Confirm? (y/n) '
		answer = gets
	end
end


options = {}
OptionParser.new { |opts|
	opts.banner = "Usage: #{__FILE__} [options]"

	opts.on('-a', '--[no-]auto', 'Run in full auto, skip any confirmations') { |v| options[:auto] = v }
	opts.on('-v', '--[no-]verbose', 'Verbose logging') { |v| options[:verbose] = v }

	opts.on_tail('-h', '--help', 'Show this message') { puts opts; exit }
}.parse!

rw = Rewriter.new(options)
#	'Шаблон:Посещаемость_по_данным_Compete',
rw.run(Openstat.new, 'посещаемость по данным Openstat', 'lists/Шаблон:Посещаемость_по_данным_Openstat')
rw.run(LiveInternet.new, 'посещаемость по данным LiveInternet', 'lists/Шаблон:Посещаемость_по_данным_LiveInternet')
rw.run(MailRu.new, 'посещаемость по данным Mail.ru', 'lists/Шаблон:Посещаемость_по_данным_Mail.ru')
rw.run(Rambler.new, 'посещаемость по данным Rambler', 'lists/Шаблон:Посещаемость_по_данным_Rambler')
rw.run(Quantcast.new, 'посещаемость по данным Quantcast', 'lists/Шаблон:Посещаемость_по_данным_Quantcast')
